# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
parameters:
  release-version:
    type: string
    default: ""
  next-version:
    type: string
    default: ""

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: kevinbuntrock/maven-toolchain-jdk-8-11-17:latest
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Clean install
          command: |
            cd openapi-maven-plugin
            echo $JAVA_HOME
            mvn --version
            mvn clean install
        
      - run:
          name: Prepare integration tests
          command: |
            cp -r ~/.m2/repository/* integration-tests/src/test/resources-its/com/github/kbuntrock/it/BasicIT/.predefined-repo
            
      - run:
          name: Integration tests JDK8
          command: |
            export JAVA_HOME=$JAVA8_HOME
            mvn --version
            cd integration-tests
            mvn -Dit.test=BasicIT#nominal_test_case_jdk8 clean verify
            
      - run:
          name: Integration tests JDK11
          command: |
            export JAVA_HOME=$JAVA11_HOME
            mvn --version
            cd integration-tests
            mvn -Dit.test=BasicIT#nominal_test_case_jdk11 clean verify
            
      - run:
          name: Integration tests JDK17
          command: |
            export JAVA_HOME=$JAVA17_HOME
            mvn --version
            cd integration-tests
            mvn -Dit.test=BasicIT#nominal_test_case_jdk17 clean verify

# try https://support.circleci.com/hc/en-us/articles/360043638052-Conditional-steps-in-jobs-and-conditional-workflows
      - when: 
          condition:
            and: # All must be true to trigger
              - and: [ << pipeline.parameters.release-version >>, << pipeline.parameters.next-version >> ]
          steps:
            - add_ssh_keys:
                fingerprints:
                  - "00:29:09:72:e0:c0:ed:b8:5c:6f:10:b5:cf:b4:7c:77"
            - run:
                name: tag release version
                command: |
                  sh ./update-version.sh << pipeline.parameters.release-version >>
                  cd openapi-maven-plugin
                  export JAVA_HOME=$JAVA17_HOME
                  mvn --version
                  mvn clean install
                  cd ..
                  git config user.email "release"
                  git config user.name "release@github.com"
                  git branch --set-upstream-to=origin/${CIRCLE_BRANCH} ${CIRCLE_BRANCH}
                  git diff --quiet && git diff --staged --quiet || git commit -am "Release << pipeline.parameters.release-version >>"
                  git push
                  git tag -f << pipeline.parameters.release-version >>
                  git push -f origin << pipeline.parameters.release-version >>
            
            - run:
                name: update next version
                command: |
                  sh ./update-version.sh << pipeline.parameters.next-version >>-SNAPSHOT
                  git diff --quiet && git diff --staged --quiet || git commit -am "Next dev version : << pipeline.parameters.next-version >>-SNAPSHOT"
                  git push
            
      
      # Uncomment to check execution result of integration tests
      #- store_artifacts:
      #    path: integration-tests/target/maven-it/com/github/kbuntrock/it/BasicIT/nominal_test_case_jdk8/mvn-stdout.log
      #    destination: log-jdk8.txt
     
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10  
              
    steps:
      - attach_workspace:
          at: release
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=${CIRCLE_TAG}
            ghr -t ${GITHUB_RELEASE_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./release/
            
  build-tag:
    docker:
      - image: kevinbuntrock/maven-toolchain-jdk-8-11-17:latest
    steps:
      - checkout
      - run: 
          name: checkout tag
          command: git checkout tags/${CIRCLE_TAG} -b ${CIRCLE_TAG}-branch
      - run:
          name: build release version
          command: |
            cd openapi-maven-plugin
            export JAVA_HOME=$JAVA17_HOME
            mvn --version
            mvn clean install
      - run: 
          name: move release artifacts
          command: |
            mkdir release
            cp openapi-maven-plugin/target/openapi-maven-plugin-${CIRCLE_TAG}.jar release
            cd release
            pwd
            ls -l
      - persist_to_workspace:
          root: release
          paths:
            - openapi-maven-plugin-*

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-and-test: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test:
          filters:
            tags:
              ignore: /^\d+\.\d+\.\d+$/
  
  release: 
    jobs:
      - build-tag:
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
      - publish-github-release:
          requires:
            - build-tag
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
      
      
